trigger:
- main

pool:
  name: bhaweshnew

variables:
  terraformWorkingDir: '$(System.DefaultWorkingDirectory)/parent'
  azureServiceConnection: 'SPN_Bhawesh'

steps:
- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'

- task: TerraformTask@5
  name: TerraformInit
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: '$(azureServiceConnection)'
    backendAzureRmOverrideSubscriptionID: '9f199aee-1ad7-464f-bd74-4b88ef990086'
    backendAzureRmResourceGroupName: 'G20_RG'
    workingDirectory: '$(terraformWorkingDir)'
    backendAzureRmStorageAccountName: 'g20stg'
    backendAzureRmContainerName: 'bhawesh-tfstate'
    backendAzureRmKey: 'aks.tfstate'

- task: TerraformTask@5
  name: TerraformPlan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(terraformWorkingDir)'
    environmentServiceNameAzureRM: '$(azureServiceConnection)'

# üëá Add this script step ‚Äî runs only if plan fails
- script: |
    echo "‚ö†Ô∏è Terraform Plan failed. Running force-unlock..."
    terraform init
    terraform force-unlock bbd3c6aa-401c-6e72-f35d-b9fd964ddd64
  displayName: 'Force Unlock Terraform State (on plan failure)'
  workingDirectory: '$(terraformWorkingDir)'
  condition: failed()

- task: TerraformTask@5
  name: TerraformApply
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: '-auto-approve'
    workingDirectory: '$(terraformWorkingDir)'
    environmentServiceNameAzureRM: '$(azureServiceConnection)'
